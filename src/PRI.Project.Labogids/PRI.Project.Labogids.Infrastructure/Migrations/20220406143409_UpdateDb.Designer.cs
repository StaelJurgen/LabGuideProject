// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PRI.Project.Labogids.Infrastructure.Data;

namespace PRI.Project.Labogids.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220406143409_UpdateDb")]
    partial class UpdateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Laboratories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sint-Lucaslaan 18",
                            City = "Brugge",
                            Country = "België",
                            Name = "AZ Sint-Lucas",
                            PostalCode = 8310
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ruddershove 10",
                            City = "Brugge",
                            Country = "België",
                            Name = "AZ Sint-Jan",
                            PostalCode = 8000
                        },
                        new
                        {
                            Id = 3,
                            Address = "Corneel Heymanslaan 10",
                            City = "Gent",
                            Country = "België",
                            Name = "UZ Gent",
                            PostalCode = 9000
                        },
                        new
                        {
                            Id = 4,
                            Address = "Laarbeeklaan 101",
                            City = "Jette",
                            Country = "België",
                            Name = "UZ Brussel",
                            PostalCode = 1090
                        },
                        new
                        {
                            Id = 5,
                            Address = "Drie eikenstraat 655",
                            City = "Edegem",
                            Country = "België",
                            Name = "UZ Antwerpen",
                            PostalCode = 2650
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kalvekeetdijk 260",
                            City = "Knokke-Heist",
                            Country = "België",
                            Name = "AZ Zeno",
                            PostalCode = 8300
                        },
                        new
                        {
                            Id = 7,
                            Address = "Ringlaan 15",
                            City = "Eeklo",
                            Country = "België",
                            Name = "AZ Alma",
                            PostalCode = 9900
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("int");

                    b.Property<string>("Synonym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimePeriod")
                        .HasColumnType("int");

                    b.Property<int>("TurnAroundTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("RequestDefinitionId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LaboratoryId = 1,
                            Name = "Hemoglobine",
                            RequestCode = "100",
                            RequestDefinitionId = 1,
                            SpecimenId = 2,
                            Synonym = "Haemoglobine",
                            TimePeriod = 0,
                            TurnAroundTime = 10
                        },
                        new
                        {
                            Id = 2,
                            LaboratoryId = 1,
                            Name = "IJzer",
                            RequestCode = "221",
                            RequestDefinitionId = 2,
                            SpecimenId = 3,
                            TimePeriod = 0,
                            TurnAroundTime = 60
                        },
                        new
                        {
                            Id = 3,
                            LaboratoryId = 1,
                            Name = "Transferrine",
                            RequestCode = "222",
                            RequestDefinitionId = 3,
                            SpecimenId = 3,
                            TimePeriod = 0,
                            TurnAroundTime = 60
                        },
                        new
                        {
                            Id = 4,
                            LaboratoryId = 1,
                            Name = "Ferritine",
                            RequestCode = "224",
                            RequestDefinitionId = 4,
                            SpecimenId = 3,
                            TimePeriod = 0,
                            TurnAroundTime = 60
                        },
                        new
                        {
                            Id = 5,
                            LaboratoryId = 1,
                            Name = "TSH",
                            RequestCode = "401",
                            RequestDefinitionId = 5,
                            SpecimenId = 3,
                            Synonym = "Thyroïd stimulerend hormoon",
                            TimePeriod = 0,
                            TurnAroundTime = 120
                        },
                        new
                        {
                            Id = 6,
                            LaboratoryId = 1,
                            Name = "Vrij T3",
                            RequestCode = "413",
                            RequestDefinitionId = 6,
                            SpecimenId = 3,
                            Synonym = "FT3",
                            TimePeriod = 0,
                            TurnAroundTime = 120
                        },
                        new
                        {
                            Id = 7,
                            LaboratoryId = 1,
                            Name = "Vrij T4",
                            RequestCode = "412",
                            RequestDefinitionId = 7,
                            SpecimenId = 3,
                            Synonym = "FT4",
                            TimePeriod = 0,
                            TurnAroundTime = 120
                        },
                        new
                        {
                            Id = 8,
                            LaboratoryId = 6,
                            Name = "Hemoglobine A1c",
                            RequestCode = "280",
                            RequestDefinitionId = 8,
                            SpecimenId = 2,
                            Synonym = "HbA1c",
                            TimePeriod = 1,
                            TurnAroundTime = 24
                        },
                        new
                        {
                            Id = 9,
                            LaboratoryId = 7,
                            Name = "ANCA",
                            RequestCode = "514",
                            RequestDefinitionId = 9,
                            SpecimenId = 3,
                            Synonym = "Antineutrofiele cytoplasmatische antistoffen",
                            TimePeriod = 3,
                            TurnAroundTime = 1
                        },
                        new
                        {
                            Id = 10,
                            LaboratoryId = 3,
                            Name = "ACA IgG",
                            RequestCode = "V_ACA-IgG",
                            RequestDefinitionId = 10,
                            SpecimenId = 4,
                            Synonym = "Anticardiolipine A IgG",
                            TimePeriod = 3,
                            TurnAroundTime = 1
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.ReferenceValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaximalAge")
                        .HasColumnType("int");

                    b.Property<double>("MaximumValue")
                        .HasColumnType("float");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("ReferenceValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaximalAge = 1,
                            MaximumValue = 22.0,
                            MinimumValue = 14.5,
                            Period = 2,
                            PropertyId = 1,
                            Unit = "g/dl"
                        },
                        new
                        {
                            Id = 2,
                            MaximalAge = 1,
                            MaximumValue = 22.0,
                            MinimumValue = 14.0,
                            Period = 3,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 3,
                            MaximalAge = 2,
                            MaximumValue = 20.0,
                            MinimumValue = 12.5,
                            Period = 3,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 4,
                            MaximalAge = 1,
                            MaximumValue = 18.0,
                            MinimumValue = 11.0,
                            Period = 4,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 5,
                            MaximalAge = 6,
                            MaximumValue = 13.5,
                            MinimumValue = 10.0,
                            Period = 4,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 6,
                            MaximalAge = 2,
                            MaximumValue = 13.5,
                            MinimumValue = 10.5,
                            Period = 5,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 7,
                            MaximalAge = 6,
                            MaximumValue = 14.0,
                            MinimumValue = 11.0,
                            Period = 5,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 8,
                            MaximalAge = 12,
                            MaximumValue = 15.5,
                            MinimumValue = 11.5,
                            Period = 5,
                            PropertyId = 1,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 9,
                            MaximalAge = 18,
                            MaximumValue = 17.0,
                            MinimumValue = 13.0,
                            Period = 5,
                            PropertyId = 1,
                            Sex = "M",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 10,
                            MaximalAge = 18,
                            MaximumValue = 15.4,
                            MinimumValue = 12.0,
                            Period = 5,
                            PropertyId = 1,
                            Sex = "F",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 11,
                            MaximalAge = 0,
                            MaximumValue = 16.800000000000001,
                            MinimumValue = 13.199999999999999,
                            Period = 0,
                            PropertyId = 1,
                            Sex = "M",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 12,
                            MaximalAge = 0,
                            MaximumValue = 15.5,
                            MinimumValue = 11.800000000000001,
                            Period = 0,
                            PropertyId = 1,
                            Sex = "F",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 13,
                            MaximalAge = 0,
                            MaximumValue = 175.0,
                            MinimumValue = 65.0,
                            Period = 0,
                            PropertyId = 2,
                            Sex = "M",
                            Unit = "µg/dL"
                        },
                        new
                        {
                            Id = 14,
                            MaximalAge = 0,
                            MaximumValue = 170.0,
                            MinimumValue = 50.0,
                            Period = 0,
                            PropertyId = 2,
                            Sex = "F",
                            Unit = "µg/dL"
                        },
                        new
                        {
                            Id = 15,
                            MaximalAge = 0,
                            MaximumValue = 2.96,
                            MinimumValue = 1.6799999999999999,
                            Period = 0,
                            PropertyId = 3,
                            Sex = "M",
                            Unit = "g/L"
                        },
                        new
                        {
                            Id = 16,
                            MaximalAge = 0,
                            MaximumValue = 3.7200000000000002,
                            MinimumValue = 1.6799999999999999,
                            Period = 0,
                            PropertyId = 3,
                            Sex = "F",
                            Unit = "g/L"
                        },
                        new
                        {
                            Id = 17,
                            MaximalAge = 0,
                            MaximumValue = 322.0,
                            MinimumValue = 22.0,
                            Period = 0,
                            PropertyId = 4,
                            Sex = "M",
                            Unit = "µg/dL"
                        },
                        new
                        {
                            Id = 18,
                            MaximalAge = 0,
                            MaximumValue = 291.0,
                            MinimumValue = 10.0,
                            Period = 0,
                            PropertyId = 4,
                            Sex = "F",
                            Unit = "µg/dL"
                        },
                        new
                        {
                            Id = 19,
                            MaximalAge = 2,
                            MaximumValue = 6.1500000000000004,
                            MinimumValue = 0.87,
                            Period = 5,
                            PropertyId = 5,
                            Unit = "mU/L"
                        },
                        new
                        {
                            Id = 20,
                            MaximalAge = 12,
                            MaximumValue = 4.1600000000000001,
                            MinimumValue = 0.67000000000000004,
                            Period = 5,
                            PropertyId = 5,
                            Unit = "mU/L"
                        },
                        new
                        {
                            Id = 21,
                            MaximalAge = 20,
                            MaximumValue = 4.1699999999999999,
                            MinimumValue = 0.47999999999999998,
                            Period = 5,
                            PropertyId = 5,
                            Unit = "mU/L"
                        },
                        new
                        {
                            Id = 22,
                            MaximalAge = 0,
                            MaximumValue = 4.7800000000000002,
                            MinimumValue = 0.55000000000000004,
                            Period = 0,
                            PropertyId = 5,
                            Unit = "mU/L"
                        },
                        new
                        {
                            Id = 23,
                            MaximalAge = 2,
                            MaximumValue = 8.0,
                            MinimumValue = 5.0999999999999996,
                            Period = 5,
                            PropertyId = 6,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 24,
                            MaximalAge = 12,
                            MaximumValue = 7.4000000000000004,
                            MinimumValue = 5.0999999999999996,
                            Period = 5,
                            PropertyId = 6,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 25,
                            MaximalAge = 20,
                            MaximumValue = 7.2000000000000002,
                            MinimumValue = 4.7000000000000002,
                            Period = 5,
                            PropertyId = 6,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 26,
                            MaximalAge = 0,
                            MaximumValue = 6.5,
                            MinimumValue = 3.5,
                            Period = 0,
                            PropertyId = 6,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 27,
                            MaximalAge = 2,
                            MaximumValue = 18.600000000000001,
                            MinimumValue = 12.1,
                            Period = 5,
                            PropertyId = 7,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 28,
                            MaximalAge = 12,
                            MaximumValue = 18.100000000000001,
                            MinimumValue = 11.1,
                            Period = 5,
                            PropertyId = 7,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 29,
                            MaximalAge = 20,
                            MaximumValue = 18.399999999999999,
                            MinimumValue = 10.699999999999999,
                            Period = 5,
                            PropertyId = 7,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 30,
                            MaximalAge = 0,
                            MaximumValue = 22.699999999999999,
                            MinimumValue = 11.5,
                            Period = 0,
                            PropertyId = 7,
                            Unit = "pmol/L"
                        },
                        new
                        {
                            Id = 31,
                            MaximalAge = 0,
                            MaximumValue = 0.0,
                            MinimumValue = 0.0,
                            Period = 0,
                            PropertyId = 8,
                            StringValue = "Negatief"
                        },
                        new
                        {
                            Id = 32,
                            MaximalAge = 0,
                            MaximumValue = 6.2000000000000002,
                            MinimumValue = 3.8999999999999999,
                            Period = 0,
                            PropertyId = 9,
                            Unit = "%"
                        },
                        new
                        {
                            Id = 33,
                            MaximalAge = 0,
                            MaximumValue = 20.0,
                            MinimumValue = 0.0,
                            Period = 0,
                            PropertyId = 10,
                            Unit = "U/mL"
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.RequestDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingCode")
                        .HasColumnType("int");

                    b.Property<string>("CumulationRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnoseRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingCode = 127013
                        },
                        new
                        {
                            Id = 2,
                            BillingCode = 540551,
                            CumulationRule = "IJzer afzonderlijk en ijzer met ijzerbindend vermogen (apart nomenclatuurnummer) mogen onderling niet gecumuleerd worden."
                        },
                        new
                        {
                            Id = 3,
                            BillingCode = 541030,
                            CumulationRule = "IJzer met ijzerbindend vermogen en transferrine mogen onderling niet gecumuleerd worden."
                        },
                        new
                        {
                            Id = 4,
                            BillingCode = 541472,
                            CumulationRule = "Ferritine: geen cumul van RIA-techniek met andere techniek."
                        },
                        new
                        {
                            Id = 5,
                            BillingCode = 546173,
                            CumulationRule = "Maximum twee van TSH, FT4, T4 en T3RU, T4 en TBG, FT3, T3 en T3RU, FT3 en TBG"
                        },
                        new
                        {
                            Id = 6,
                            BillingCode = 546276,
                            CumulationRule = "Maximum twee van TSH, FT4, T4 en T3RU, T4 en TBG, FT3, T3 en T3RU, FT3 en TBG"
                        },
                        new
                        {
                            Id = 7,
                            BillingCode = 546291,
                            CumulationRule = "Maximum twee van TSH, FT4, T4 en T3RU, T4 en TBG, FT3, T3 en T3RU, FT3 en TBG"
                        },
                        new
                        {
                            Id = 8,
                            BillingCode = 556371
                        },
                        new
                        {
                            Id = 9,
                            BillingCode = 540750,
                            CumulationRule = "Geglycosyleerd hemoglobine of fructosamine mogen niet onderling gecumuleerd worden.",
                            DiagnoseRule = "Doseren van glycohemoglobine in hemolysaat mag enkel aangerekend worden voor een patiënt met diabetes mellitus, mucoviscidose of chronische pancreatitis."
                        },
                        new
                        {
                            Id = 10,
                            BillingCode = 554433,
                            DiagnoseRule = "In geval van aanwezigheid klinische criteria antifosfolipidensyndroom (vasculaire trombose en/ of miskraam) of systemische luypus erythematodes."
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specimens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EDTA-plasma"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EDTA-volbloed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Serum"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Citraatplasma"
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.StorageCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimePeriod")
                        .HasColumnType("int");

                    b.Property<int>("TimeReference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StorageConditions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Temperature = "20°C",
                            TimePeriod = 4,
                            TimeReference = 1
                        },
                        new
                        {
                            Id = 2,
                            Temperature = "20°C",
                            TimePeriod = 4,
                            TimeReference = 2
                        },
                        new
                        {
                            Id = 3,
                            Temperature = "2 - 8°C",
                            TimePeriod = 7,
                            TimeReference = 2
                        },
                        new
                        {
                            Id = 4,
                            Temperature = "-20°C",
                            TimePeriod = 60,
                            TimeReference = 2
                        },
                        new
                        {
                            Id = 5,
                            Temperature = "20°C",
                            TimePeriod = 8,
                            TimeReference = 1
                        },
                        new
                        {
                            Id = 6,
                            Temperature = "-20°C",
                            TimePeriod = 1,
                            TimeReference = 4
                        },
                        new
                        {
                            Id = 7,
                            Temperature = "-70°C",
                            TimePeriod = 1,
                            TimeReference = 5
                        },
                        new
                        {
                            Id = 8,
                            Temperature = "-20°C",
                            TimePeriod = 3,
                            TimeReference = 4
                        },
                        new
                        {
                            Id = 9,
                            Temperature = "20°C",
                            TimePeriod = 1,
                            TimeReference = 2
                        },
                        new
                        {
                            Id = 10,
                            Temperature = "2 - 8°C",
                            TimePeriod = 8,
                            TimeReference = 1
                        },
                        new
                        {
                            Id = 11,
                            Temperature = "-20°C",
                            TimePeriod = 2,
                            TimeReference = 2
                        },
                        new
                        {
                            Id = 12,
                            Temperature = "2 - 8°C",
                            TimePeriod = 2,
                            TimeReference = 2
                        });
                });

            modelBuilder.Entity("PropertyStorageCondition", b =>
                {
                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.Property<int>("StorageConditionsId")
                        .HasColumnType("int");

                    b.HasKey("PropertiesId", "StorageConditionsId");

                    b.HasIndex("StorageConditionsId");

                    b.ToTable("PropertyStorageCondition");

                    b.HasData(
                        new
                        {
                            PropertiesId = 1,
                            StorageConditionsId = 1
                        },
                        new
                        {
                            PropertiesId = 2,
                            StorageConditionsId = 2
                        },
                        new
                        {
                            PropertiesId = 2,
                            StorageConditionsId = 3
                        },
                        new
                        {
                            PropertiesId = 2,
                            StorageConditionsId = 4
                        },
                        new
                        {
                            PropertiesId = 3,
                            StorageConditionsId = 2
                        },
                        new
                        {
                            PropertiesId = 3,
                            StorageConditionsId = 5
                        },
                        new
                        {
                            PropertiesId = 3,
                            StorageConditionsId = 6
                        },
                        new
                        {
                            PropertiesId = 3,
                            StorageConditionsId = 7
                        },
                        new
                        {
                            PropertiesId = 4,
                            StorageConditionsId = 2
                        },
                        new
                        {
                            PropertiesId = 4,
                            StorageConditionsId = 5
                        },
                        new
                        {
                            PropertiesId = 4,
                            StorageConditionsId = 8
                        },
                        new
                        {
                            PropertiesId = 5,
                            StorageConditionsId = 2
                        },
                        new
                        {
                            PropertiesId = 5,
                            StorageConditionsId = 6
                        },
                        new
                        {
                            PropertiesId = 5,
                            StorageConditionsId = 9
                        },
                        new
                        {
                            PropertiesId = 6,
                            StorageConditionsId = 5
                        },
                        new
                        {
                            PropertiesId = 6,
                            StorageConditionsId = 10
                        },
                        new
                        {
                            PropertiesId = 6,
                            StorageConditionsId = 11
                        },
                        new
                        {
                            PropertiesId = 7,
                            StorageConditionsId = 5
                        },
                        new
                        {
                            PropertiesId = 7,
                            StorageConditionsId = 8
                        },
                        new
                        {
                            PropertiesId = 7,
                            StorageConditionsId = 12
                        },
                        new
                        {
                            PropertiesId = 10,
                            StorageConditionsId = 5
                        },
                        new
                        {
                            PropertiesId = 10,
                            StorageConditionsId = 6
                        });
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Property", b =>
                {
                    b.HasOne("PRI.Project.Labogids.Core.Entities.Laboratory", "Laboratory")
                        .WithMany("Properties")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRI.Project.Labogids.Core.Entities.RequestDefinition", "RequestDefinition")
                        .WithMany()
                        .HasForeignKey("RequestDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRI.Project.Labogids.Core.Entities.Specimen", "Specimen")
                        .WithMany("Properties")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("RequestDefinition");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.ReferenceValue", b =>
                {
                    b.HasOne("PRI.Project.Labogids.Core.Entities.Property", "Property")
                        .WithMany("ReferenceValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyStorageCondition", b =>
                {
                    b.HasOne("PRI.Project.Labogids.Core.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRI.Project.Labogids.Core.Entities.StorageCondition", null)
                        .WithMany()
                        .HasForeignKey("StorageConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Laboratory", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Property", b =>
                {
                    b.Navigation("ReferenceValues");
                });

            modelBuilder.Entity("PRI.Project.Labogids.Core.Entities.Specimen", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
